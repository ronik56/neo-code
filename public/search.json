[{"categories":null,"content":"איך מתמודדים עם עומס על השרת(ים) כיום? אחת התשובות- Load Balancer.\nהרעיון של Load Balancer בעצם נהפך להכרח אצל הרבה חברות עקב הפריצה הענקית של המשתמשים באינטרנט. פעם עוד היה אפשר להרים את המחשב של אמא בתור שרת בסיסי בסלון כמו צוקרברג, אבל מהר מאוד זה הפסיק להיות לו כפתרון לגיטימי. בכלל, כיום אתרים ואפליקציות מתמודדות עם ריבוי בקשות עצום. הפתרון, נמצא איפשהוא בין שני סוגים של scaling לפניות.\nהראשון: vertical scaling, שהוא אומר; שדרג את המכונה(שרת). תוסיף עוד RAM, תחליף ל- AMD RYZEN ותרביץ מכונה שתצליח לעמוד בריבוי הפניות. הבעיה הגדולה ביותר של זה היא שיש גבול עליון של כוח מחשובי שאפשר להגיע אליו יחסית מהר והגבול הזה גם ככה לא מספיק (לשרתים שמתקשים לעמוד בעומס).\nהשני: horizontal scaling, שהוא אומר; שכפל את השרתים כך שיש ריבוי מכונות כדי שכולם יוכלו להתחלק עם הריבוי משתמשים\\בקשות.\nהבעיה שנוצרה מ- horizontal scaling היא; איך לחלק את העבודה בין המכונות?, כלומר איך להחליט לאיזה שרת להפנות בקשה מסוימת. איך יודעים מתי שרת א’ פנוי ושרת ב’ לא פנוי?\nאז הרעיון של Load Balancer נועד לפתור בין היתר את הבעיות הנ\"ל. Load Balancer בסיסי הוא כמו ראוטר, המפנה את הבקשות אל המכונות הרלוונטיים. בדר\"כ זה יהיה שרת שמתפקד כמו reverse proxy (או כ). הוא יושב בתקשורת באמצע של הקליינט והשרת (או חוות שרתים).\nיש שני סוגים של Load Balancers פופולריים, L4 ו- L7. אז L4 מתייחס לכך שיש לו גישה רק לפורטים וה-IPים של הבקשה, ו7L מתייחס לכך שיש לו גישה לכל המידע בבקשת http (כמו body, routes, headers).\nזה אומר ש- 4L יכול לבצע את הלוגיקה של הניתוב רק בעזרת הפורטים וה-IPים של הבקשה. ה-4L מתרגם את התקשורת TCP ומחליף את ה-IP שלו עצמו (הנמען של הבקשה מהקליינט) עם ה-IP של השרת שהוא מחליט לנתב אליו את הבקשה. זה נקרא NAT – Network Address Translation.\nל-L7 יש גישה למידע של הבקשה ולכן הוא יכול לבצע יותר לוגיקה בהתאם למידע. לדוגמה, להחזיר 401 כשה- authorization header של הבקשה ריק או לא תקין. L7 יודע גם לנתב בהתאם ל-routes, למשל ב- GET /images הוא ינתב לשרת הרלוונטי שמחזיר תמונות.\nל- L7 יש 2 תקשורות TCP, אחת של הקליינט, ואחת שהוא מייצר עם השרת המנותב. הסיבות ליצירת התקשורת השנייה היא למשל בשינוי המידע בפניה, ואז העברת המידע החדש עם התקשורת החדשה. בנוסף, הרבה פעמים L7 מיושם גם כ- SSL Termination Gateway (פיענוח של המידע המוצפן) במקום שהשרתים יצטרכו להיות up to date עם התעודות SSL שלהן. 7L הוא reverse proxy קלאסי עם יכולות ניתוב.\nיש גם כמובן Internal Load Balancers (בשפה של AWS) שהם חבויים ולא ניתנים לגישה פומבית, אלא נמצאים בתוך רשת פרטית ומנהלים שם את הinfrastructure. דוגמה לכך היא ה- Docker Swarm שמנתב ומנהל את הסרביסים\\שרתים שנמצאים בתוך השרת הפרטי.\nיש סוגים שונים של לוגיקה לכל Load Balancer שבעזרתו הוא מנתב את הבקשות לשרתים השונים, והלוגיקה תלויה בצרכים של האתר\\אפליקציה. ישנם אלגוריתמים כמו round robin, שהוא כמו לחלק קלפים לאנשים לפי הסדר; הבקשה מנותבת לשרת הראשון, אח\"כ לשני, שלישי עד אחרון השרתים- ואז חוזר חלילה לשרת הראשון.\nעוד אלגוריתם נקרא Weighted Response Time, אלגוריתם שמחשב מי השרת שמגיב הכי מהר- ואליו תנותב הבקשה. החישוב מתבצע בעזרת health checks שה- load balancer שולח בקשות מידי פעם ובודק את התקינות והמהירות תגובה של השרתים.\nאלגוריתם נוסף הוא Source IP Hash, שזה אלגוריתם בו ה-IP של הקליינט וה-IP של השרת אליה נשלחה הבקשה נתפרים יחד להאש (מפתח ייחודי), כך שיהיה אפשר לדעת בדיוק לאיזה שרת הקליינט ניגש בבקשה הקודמת, במידה והבקשה\\התקשורת נפגעה, או שיש לקליינט צורך ממשי להגיע לאותו שרת ספציפי. דוגמה לכך היא במקרים בהם הקליינט צריך גישה ל-session ספציפי, בשרת ספציפי.\nישנם מקרים בהם יש עומס של פעילות ביום וירידה חדה של פעילות בלילה. במקרים כאלה, יש צורך בלהעלות\\להוריד שרתים בהתאם לעומס הבקשות בזמן אמת. רוב העננים מאפשרים את היכולות הללו, בעזרת שכפול ה-image של השרתים כך שכל השרתים יהיו זהים ומתחילים לבצע סקיילינג אוטומטי של השרתים. ב- AWS זה נקרא Auto Scaling, ובאז’ור זה נקרא Scaling Set.\nעל פניו load balancer נראה מסובך, אבל הביצוע עצמו הוא דיי straight forward. רוב העננים מאפשרים להרים אחד כזה בכמה קליקים מבלי לעשות עמידת ידיים. גם הקונפיגורציה והלוגיקה של הניתוב לא מסובכים כשמבינים על פני השטח איך הדברים עובדים (או צריכים לעבוד).\nבאז’ור למשל, צריך לעשות את הדברים הבאים:\n-להגדיר רשת פרטית לשרתים ול- load balancer\n-להגדיר שרתים שאליהם אנחנו רוצים לנתב\n-להרים שרת load balancer (דרך אז’ור) בכמה קליקים\n-להגדיר לו הגדרות כמו health checks, ssl, routing\n-ליצור “Backend Pool” – בעצם לקשר את השרתים שלנו עם הבאלאנסר\n יש load balancer עובד!  ","description":"","tags":null,"title":"Load Balancer","uri":"/posts/load-balancer/"},{"categories":null,"content":"אם אתם רוצים ליצור איתי קשר אפשר לשלוח הודעה בדף הפייסבוק כאן או לשלוח הודעה במייל: coaviv104 at gmail dot com.\nאם אתם מעוניינים לכתוב פוסט אורח (עם קרדיט כמובן) אז אפשר למלא את הטופס שכאן או פשוט ליצור קשר במייל שלמעלה.\nדרישות לפוסט אורח: רוב הפוסטים קצרים ויהיו בין 300 ל-1000 מילים בנושאים שקשורים לתכנות או לטכנולוגיות שמסביב- בין אם רשתות או codecs. גם פוסטים טכנולוגיים שהם off-topic יכולים להתקבל, אבל פחות ודאי מאשר הנושאים האחרים. פוסטים מפורטים וארוכים מעל 1000 מילים יכולים להתקבל אבל סביר שיפוצלו למספר חלקים. הסגנון צריך להיות פחות או יותר דומה לשאר הפוסטים באתר. ידע מקצועי בשפה קולחת. כל עוד הפוסט מעביר את התוכן באופן ברור, זה בסדר.\nכשאתם ממלאים את הטופס, כדאי להציג את הנושא, כמה נקודות שעליהן הפוסט ידבר ואפשר גם פסקה או שתיים לדוגמה. חבל לכתוב פוסט שלם במידה ולא יאושר, אבל אם אתם מתעקשים זה בסדר.\n","description":"","tags":null,"title":"צור קשר/פוסט אורח","uri":"/contact/"},{"categories":null,"content":"כולנו נתקלנו בפרסומות ואינסוף חסויות לשירותי VPN מכל מיני סיבות- אבטחה, פרטיות או סתם בשביל לצפות בנטפליקס אמריקה. אבל איך בדיוק VPN עובד?\nבעבר, VPN (או Virtual Private Network – רשת פרטית וירטואלית) היה בשימוש בעיקר בקרב עסקים, בדגש על חברות גדולות, בכדי לאפשר לעובדים לגשת לרשת המאובטחת במשרד מהבית באמצעות חיבור מאובטח. בשביל להבין למה היה צורך ב-VPN, כדאי להבין איך אנחנו מתחברים לאינטרנט.\nנניח שאנחנו רוצים להיכנס ליוטיוב מהמחשב, פלאפון או כל ציוד קצה אחר. קודם כל המידע נשלח מהמחשב שלנו לראוטר/מודם. לראוטר/מודם יש כתובת IP שמהווה מזהה, מעיין תעודת זהות. משם הבקשה עוברת לספקית האינטרנט שלנו, לאחת מחוות השרתים שלה, סביר להניח שבפתח תקווה או בתל אביב.\nמשם המידע יוצא דרך כבל תת ימי לאיטליה, ומשם מדלג ברשת ענק של “כבישים” בדמות סיבים אופטיים על אדמת אירופה משרת לשרת עד שמגיע לשרת המיועד של גוגל. הבקשה מגיעה ליוטיוב, הוא בתגובה שולח את התגובה ומחזיר אותה כל הדרך חזרה.\nאז איפה הבעיה? קודם כל, בכל נקודה בדרך המידע שלנו חשוף ללא מעט עיניים. מידע שעובר באופן לא מוצפן יהיה נגיש לכל בעל גישה לנקודות האלו. זו הסיבה שלהשתמש באינטרנט ציבורי, בין אם בבית החולים או בבית הקפה, כדי להתחבר לבנק הוא לא צעד מומלץ. כל אדם עם קצת ידע טכני יוכל לקרוא את כל המידע שעובר ברשת- כל הודעה, כל סיסמה. אבל גם אם המידע מוצפן, המידע שלנו נגיש להרבה גורמים אחרים. הספקית והרבה מהנקודות בדרך יכולות לראות לאן אנחנו רוצים לגשת ולקבל את היסטורית הגלישה שלנו ומידע שאולי היינו מעדיפים לשמור לעצמנו. גם האתר יוכל לראות מי אנחנו. כל הגורמים כמעט בוודאות שומרים לוגים מפורטים עם המידע שלנו.\nוכאן נכנס ה-VPN לתמונה. בכדי לייצר חיבור המאובטח ה-VPN יצר מעיין תעלה (Tunnel Protocol) שמהווה מעטפת מאובטחת לחיבור. ברגע שמזוהה חדירה כלשהי לתעלה, ה-VPN מנתק באופן מיידי את החיבור ומחבר את הלקוח באמצעות נתיב אחר. כלומר אם באיזשהו שלב בסדרת הדילוגים אחד השרתים שנחתנו עליהם “חשוף”, ה-VPN יעבור לנתיב אחר. במקום לעבור מבארי איטליה לציריך ומשם לפרנקפורט, ה-VPN אולי יזהה שהחיבור דרך ציריך חשוף, ינתק אותנו ויחבר מחדש בנתיב שעובר מבארי לרומא, משם לבאזל ולבסוף יגיע לפרנקפורט.\nבתוך התעלה הזו עובר המידע כשהוא מוצפן. כך גם אם למישהו יש גישה לתחנה כלשהי בדרך, הוא לא יוכל לקרוא את המידע ששלחנו- לא ברשת פרטית ולא ברשת ציבורית.\nואם כל זה לא מספיק, המידע עובר בתחנת ביניים- שרת ה-VPN. כשאנחנו מחוברים ל-VPN אנחנו שולחים את הבקשה מוצפנת לשרת ה-VPN. השרת מפענח את הבקשה ומביא לנו אותה. הוא מהווה מעיין מידל מן- במקום לשלוח הודעה ליוטיוב באופן ישיר, אנחנו שולחים הודעה ל-VPN ואז הוא שולח את ההודעה ליוטיוב ובכך מסתיר את הזהות שלנו מיוטיוב, שמבחינתו מי ששלח לו הודעה זה שרת ה-VPN, לא אנחנו. בזכות ההצפנה גם כל הנקודות בדרך לשרת ה-VPN לא יודעות מה ביקשנו, כי המידע מוצפן. הן רק יודעות ששלחנו בקשה כלשהי לשרת כלשהו.\nזו גם הסיבה ש-VPN מאפשר לנו לצפות בנטפליקס במדינות זרות- אם נניח שאנחנו מחוברים לשרת VPN בניו יורק וגולשים בנטפליקס, מבחינת נטפליקס התקבלה בקשה ממחשב מתל אביב אלא מקבל בקשה ממחשב בניו יורק ולכן הוא יציג לו תוכן שמתאים לתיוג הגיאוגרפי של ניו יורק. כך גם לגבי כל חסימת תוכן על בסיס גיאוגרפי אחר- בין אם ב-BBC או ביוטיוב.\nגם כשמדובר בצנזורה במדינות כמו סין או איראן ה-VPN פותר את הבעיה בדרך דומה- במקום לגשת לשרת ויקיפדיה, ניגשים לשרת ה-VPN. המדינה לא יכולה לראות מה שלחתי ל-VPN ולכן הבקשה עוברת, משם ה-VPN מבקש בעצמו מויקיפדיה את האתר ושולח לנו אותו בחזרה מוצפן. ככה ניגשנו לויקיפדיה בלי שהאח הגדול ידע- מבחינתו ביקשנו משהו משרת כלשהו ולכן זה בסדר.\nאז מה הקאטץ’? יש כמה. דבר ראשון, חולשה די בולטת היא שרת ה-VPN עצמו. הוא יודע מי שלח את הבקשה והוא יודע מה היא (הרי הוא הוריד את ההצפנה כדי לקרוא). אנחנו למעשה צריכים לסמוך על חברות ה-VPN שהן מוחקות את הלוגים שלהן.\nבעיה נוספת היא המהירות- ההצפנה והנקודה הנוספת, במיוחד אם היא רחוקה, יכולה להאט דרסטית את הגלישה. במקרה שאנחנו מתחברים מישראל דרך ארהב לאתר אירופאי לדוגמה, אנחנו נתחבר מהבית, לספקית, לאיטליה, לפרנקפורט, משם לונדון/אמסטרדם, לניו יורק, לשרת ה-VPN, שאחר כך ישלח את הבקשה לניו יורק, לונדון, נקודה כלשהי באירופה, חזרה ללונדון, ניו יורק, שרת VPN ושוב לניו יורק, לונדון, פרנקפורט, איטליה, ישראל, אלינו. אם אנחנו ניגשים לשרת אמריקאי אנחנו חוסכים 2 כיוונים לאירופה, אבל עדיין מדובר בדרך שחוצה יבשות ואוקיינוס ואנחנו נחווה ניחות (גם אם לא אחד שיורגש יותר מדי).\nעם זאת כדאי לציין שבשעות עומס לפעמים דווקא ה-VPN יכול להיות יותר מהיר, בגלל שהוא עובר ב\"סמטאות” אינטרנט מאובטחות יותר ולכן ניגש לשרת בדרך פחות עמוסה, בניגוד לרוב האנשים שיעברו דרך כביש סואן.\n","description":"","tags":null,"title":"על VPN","uri":"/posts/vpn/"}]